<?php
include(drupal_get_path('module','spy_manip').'/includes/spy_manip.functions.inc');

/**
 * Implements hook_form_alter().
 */
function spy_manip_form_alter(&$form, &$form_state, $form_id){
    if(!array_key_exists('#user',$form) && !array_key_exists('#node',$form) && !array_key_exists('#term',$form) ){
        $form['#submit'][] = 'spy_manip_form_submit';
    }
}

/**
* Submit log manip
**/
function spy_manip_form_submit($form, &$form_state){
  $change = array(
    'form' => $form['#id'],
    'change' => ''
  );
  spy_manip_log_manip($change);
}


/**
 * Implements hook_node_presave().
 */
function spy_manip_node_presave($node) {
  $fields_changed = spy_manip_fields_changed_node($node->original, $node, $node->type);
  if(!empty($fields_changed)){
    $change = array(
      'form' => $node->type."-node-form",
      'change' => implode(",", $fields_changed)
    );
    spy_manip_log_manip($change);
  }
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function spy_manip_taxonomy_term_presave($term) {
  $fields_changed = spy_manip_fields_changed_term($term->original, $term);
  if(!empty($fields_changed)){
    $change = array(
      'form' => "taxonomy-form-term (".$term->vocabulary_machine_name.")",
      'change' => implode(",", $fields_changed)
    ); 
    spy_manip_log_manip($change);
  }
}

/**
 * Implements hook_user_presave().
 */
function spy_manip_user_presave(&$edit, $account, $category) {
  $fields_changed = spy_manip_fields_changed_user($edit, $account->original);
  $change = array(
    'form' => "user-profile-form (".$account->uid.")",
    'change' => ''
  ); 
  spy_manip_log_manip($change);
}

/**
 * Implements hook_menu().
 */
function spy_manip_menu(){
  $items = array();
  $items['admin/config/spy_manip'] = array(
    'title' => 'Spy Manip Settings',
    'page callback' => 'spy_manip_show_log',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Page callback
 */
function spy_manip_show_log(){
  $header = array('Author', 'IP', 'Time', 'URL', 'Form', 'Changes');
  $data = array();
  $query = db_select('spy', 's')
       ->fields('s')
       ->orderBy('spy_Id', 'DESC');
  $result = $query->execute();
  while($row = $result->fetchAssoc()){ 
    unset($row['spy_Id']);
    $row['uid'] = user_load($row['uid'])->name;
    $row['time'] = date('d/m/Y - H:i:s', ($row['time']));
    array_push($data, $row); 
  }
  $output = theme('table', array(
      'header'=> $header,
      'rows' => $data));
  return $output;
}

/**
* Implements hook_cronapi().
* @param  array $op
* @param  array $job
*/
function spy_manip_cronapi($op, $job = NULL) {

  $items['spy_manip_remove_expired_log'] = array(
    'description' => 'Remove expired spy manip log',
    'rule' => variable_get('spy_manip_cron', '4 0 * * 0'), // Every day at 9:00 AM
    'callback' => 'spy_manip_remove_expired_log',
  );

  return $items;
}

/**
 * Page callback
 */
function spy_manip_remove_expired_log(){
  $timeAgo = strtotime("-2 week");
  db_delete('spy')
    ->condition('time', $timeAgo, '<')
    ->execute();
}